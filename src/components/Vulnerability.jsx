import React, { useState } from "react";
import { FaBug, FaLightbulb, FaLink } from "react-icons/fa";

export default function VulnerabilityScanner() {
  const [code, setCode] = useState("");
  const [results, setResults] = useState([]);

  // Vulnerability rules across languages
  const rules = [
    // ---- C++ ----
    {
      regex: /\b(strcpy|gets)\s*\(/,
      message: "Use of strcpy() or gets() may cause buffer overflow.",
      suggestion: "Use safer alternatives like strncpy() or fgets().",
      severity: "High",
      reference: "https://owasp.org/www-community/attacks/Buffer_overflow_attack"
    },
    {
      regex: /password\s*=\s*["'][^"']+["']/,
      message: "Hardcoded password found.",
      suggestion: "Store secrets in environment variables or config files.",
      severity: "High",
      reference: "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"
    },

    // ---- JavaScript ----
    {
      regex: /\beval\s*\(/,
      message: "Use of eval() is dangerous.",
      suggestion: "Avoid eval(). Use JSON.parse or safer alternatives.",
      severity: "High",
      reference: "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"
    },
    {
      regex: /\bnew Function\s*\(/,
      message: "Dynamic Function() constructor is unsafe.",
      suggestion: "Avoid Function(). Use safe parsing methods.",
      severity: "High",
      reference: "https://owasp.org/www-community/attacks/Code_Injection"
    },
    {
      regex: /innerHTML\s*=/,
      message: "Direct innerHTML assignment can cause XSS.",
      suggestion: "Use textContent or sanitization libraries.",
      severity: "High",
      reference: "https://owasp.org/www-community/attacks/xss/"
    },
    {
      regex: /document\.write\s*\(/,
      message: "document.write() can inject unsafe HTML.",
      suggestion: "Use DOM methods like createElement.",
      severity: "Medium",
      reference: "https://developer.mozilla.org/en-US/docs/Web/API/Document/write"
    },
    {
      regex: /\b(md5|sha1)\b/i,
      message: "Weak cryptographic hash function detected.",
      suggestion: "Use SHA-256 or bcrypt instead.",
      severity: "High",
      reference: "https://owasp.org/www-community/vulnerabilities/Weak_password_hashing"
    },
    {
      regex: /api[_-]?key\s*=\s*["'][A-Za-z0-9-_]+["']/i,
      message: "Hardcoded API key detected.",
      suggestion: "Do not hardcode API keys. Use environment variables.",
      severity: "High",
      reference: "https://owasp.org/www-community/vulnerabilities/Exposed_secret"
    },

    // ---- HTML ----
    {
      regex: /on\w+="[^"]+"/,
      message: "Inline event handler found (e.g., onclick).",
      suggestion: "Use addEventListener() instead of inline JS.",
      severity: "Medium",
      reference: "https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Event_attributes"
    },
    {
      regex: /<script[^>]+src=["']http:\/\//,
      message: "Insecure HTTP script load.",
      suggestion: "Always load scripts over HTTPS.",
      severity: "High",
      reference: "https://owasp.org/www-community/attacks/Mixed_content"
    },
    {
      regex: /<a[^>]+href=["'][^"']+["'](?![^>]*rel=["']noopener noreferrer["'])/,
      message: "Link missing rel=\"noopener noreferrer\".",
      suggestion: "Add rel=\"noopener noreferrer\" to external links.",
      severity: "Low",
      reference: "https://web.dev/external-anchors-use-rel-noopener/"
    },

    // ---- SQL ----
    {
      regex: /SELECT.*\+.*FROM/i,
      message: "SQL string concatenation detected.",
      suggestion: "Use parameterized queries or prepared statements.",
      severity: "High",
      reference: "https://owasp.org/www-community/attacks/SQL_Injection"
    },
    {
      regex: /DROP\s+TABLE/i,
      message: "DROP TABLE statement detected.",
      suggestion: "Avoid destructive queries unless absolutely necessary.",
      severity: "High",
      reference: "https://owasp.org/www-community/attacks/SQL_Injection"
    },
    {
      regex: /DELETE\s+FROM\s+\w+\s*;/i,
      message: "DELETE without WHERE clause detected.",
      suggestion: "Always use WHERE clause to limit affected rows.",
      severity: "High",
      reference: "https://owasp.org/www-community/attacks/SQL_Injection"
    }
  ];

  const scanCode = () => {
    const findings = [];
    const lines = code.split("\n");

    lines.forEach((line, index) => {
      rules.forEach(rule => {
        if (rule.regex.test(line)) {
          findings.push({
            line: index + 1,
            text: line.trim(),
            ...rule
          });
        }
      });
    });

    setResults(findings.length > 0 ? findings : []);
  };

  return (
    <section>
      <h3 className="text-center mb-3">
        <FaBug className="me-2" /> Multi-Language Vulnerability Scanner
      </h3>
      <p className="text-center text-muted">
        Paste your <b>C++ / JavaScript / HTML / SQL</b> code and check for vulnerabilities.
      </p>

      <textarea
        className="form-control mb-3"
        rows="10"
        style={{ fontFamily: "monospace" }}
        placeholder="Paste your code here..."
        value={code}
        onChange={(e) => setCode(e.target.value)}
      ></textarea>

      <div className="d-flex justify-content-center">
        <button className="btn btn-danger" onClick={scanCode}>
          Scan Code
        </button>
      </div>

      <div className="mt-4">
        {results.length === 0 && code.trim().length > 0 && (
          <div className="alert alert-success shadow-sm">
            âœ… No vulnerabilities detected. Your code looks safe!
          </div>
        )}

        {results.map((res, i) => (
          <div key={i} className="alert alert-warning shadow-sm">
            <b>Line {res.line}:</b> {res.message} <br />
            <code>{res.text}</code>
            <div className="mt-2">
              <FaLightbulb className="me-2 text-info" />
              <b>Fix:</b> {res.suggestion}
            </div>
            <div className="mt-1">
              <span className="badge bg-danger me-2">{res.severity} Risk</span>
              <a href={res.reference} target="_blank" rel="noreferrer">
                <FaLink className="me-1" /> Reference
              </a>
            </div>
          </div>
        ))}
      </div>
    </section>
  );
}
